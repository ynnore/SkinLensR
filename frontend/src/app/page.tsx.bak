'use client';

import React, { useState, KeyboardEvent, useEffect } from 'react';
import Head from 'next/head';
import styles from './page.module.css';
import { FaPaperclip, FaImage, FaKeyboard, FaMicrophone, FaUser, FaPlayCircle } from 'react-icons/fa';
import { LanguageCode } from '@/types'; // Import depuis le fichier central de types

// --- CONFIGURATIONS ---

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

const languageOptions = {
  en: { name: 'English', emblem: '🌹' },
  fr: { name: 'Français', emblem: '🐓' },
  mi: { name: 'Te Reo Māori', emblem: '🌿' },
};

const translations = {
  welcomeMessage: {
    en: "Hello! I'm SkinLensR. How can I help you today?",
    fr: "Bonjour ! Je suis SkinLensR. Comment puis-je vous aider ?",
    mi: "Kia ora! Ko SkinLensR ahau. Me pēhea taku āwhina i a koe i tēnei rā?",
  },
  thinking: {
    en: 'SkinLensR is thinking...',
    fr: 'SkinLensR réfléchit...',
    mi: 'Ke whakaaro a SkinLensR...',
  },
  placeholder: {
    en: 'Type your message...',
    fr: 'Tapez votre message...',
    mi: 'Tēnā koa, tāpiri tō karere...',
  },
  welcomeHeadline: { en: 'Automate anything', fr: 'Automatisez tout', mi: 'Rangatira katoa' },
  watch: { en: 'Watch', fr: 'Regarder', mi: 'Mātakitaki' },
  intro: { en: 'Getting started with SkinLensR', fr: 'Bien démarrer avec SkinLensR', mi: 'Kei te timata ki SkinLensR' },
  inputBar: { en: 'Type here to give a task to SkinLensR', fr: 'Tapez ici une tâche à confier à SkinLensR', mi: 'Tāpaea tēnei ki SkinLensR' },
};

// --- COMPOSANT INTERFACE DE CHAT ---
const ChatInterface = ({
  language,
}: {
  language: LanguageCode;
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  useEffect(() => {
    setMessages([{ role: 'assistant', content: translations.welcomeMessage[language] }]);
  }, [language]);

  const getAssistantAvatar = () => {
    const emblem = languageOptions[language]?.emblem || '🤖';
    return <div className={styles.robotAvatar}>{emblem}</div>;
  };

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;
    setMessages(prev => [...prev, { role: 'user', content: inputValue }]);
    setInputValue('');
    setIsLoading(true);
    setTimeout(() => {
      setMessages(prev => [
        ...prev,
        { role: 'assistant', content: 'Here is a sample response from SkinLensR!' },
      ]);
      setIsLoading(false);
    }, 1000);
  };

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !isLoading) handleSendMessage();
  };

  return (
    <div className={styles.chatContainer}>
      <header className={styles.pageHeader}>
        <div className={styles.headerLeft}>
          <span>Run</span>
          <h1>App Development on Jetson Orin Nano</h1>
        </div>
        <div className={styles.headerRight}>
          <button className={styles.moreButton}>...</button>
          <button className={styles.shareButton}>3D</button>
        </div>
      </header>
      <div className={styles.messagesArea}>
        {messages.map((msg, i) => (
          // J'ai utilisé .join(' ') au lieu de backticks pour plus de robustesse
          <div key={i} className={[styles.messageBubble, msg.role === 'user' ? styles.userMessage : styles.assistantMessage].join(' ')}>
            <div className={styles.avatar}>
              {msg.role === 'user' ? <FaUser /> : getAssistantAvatar()}
            </div>
            <p className={styles.messageContent}>{msg.content}</p>
          </div>
        ))}
        {isLoading && (
          <div className={[styles.messageBubble, styles.assistantMessage].join(' ')}>
            <div className={styles.avatar}>
              {getAssistantAvatar()}
            </div>
            <p className={styles.messageContent}>
              <i>{translations.thinking[language]}</i>
            </p>
          </div>
        )}
      </div>
      <footer className={styles.pageFooter}>
        <div className={styles.inputWrapper}>
          <button className={styles.iconButton}><FaPaperclip /></button>
          <input
            type="text"
            placeholder={translations.placeholder[language]}
            value={inputValue}
            onChange={e => setInputValue(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={isLoading}
          />
        </div>
        <div className={styles.footerActions}>
          <div className={styles.footerActionsLeft}>
            <button className={styles.iconButton}><FaImage /></button>
            <button className={styles.iconButton}><FaKeyboard /></button>
            <button className={styles.iconButton}><FaMicrophone /></button>
          </div>
          <div className={styles.footerActionsRight}>
            <button className={styles.sendButton} onClick={handleSendMessage} disabled={isLoading}>
              ↑
            </button>
          </div>
        </div>
      </footer>
    </div>
  );
};

// --- COMPOSANT WELCOME ---
const WelcomeInterface = ({ language }: { language: LanguageCode }) => {
  return (
    <div className={styles.welcomeContainer}>
      <div className={styles.welcomeLogo}>
        <div className={styles.logoIcon}>H</div>
        <h1>{translations.welcomeHeadline[language]}</h1>
      </div>
      <div className={styles.welcomeCard}>
        <div className={styles.videoThumbnail}><FaPlayCircle /></div>
        <div className={styles.cardText}>
          <p><strong>{translations.watch[language]}</strong></p>
          <p>{translations.intro[language]}</p>
        </div>
        <button className={styles.closeCardButton}>×</button>
      </div>
      <div className={styles.inputBar}>{translations.inputBar[language]}</div>
    </div>
  );
};


// --- COMPOSANT PRINCIPAL DE LA PAGE ---
// Ce composant reçoit les props du Layout parent et les passe à ses enfants.
export default function Page({ language = 'en' }: { language?: LanguageCode }) {
  const isLoggedIn = true;
  return (
    <>
      <Head>
        <title>SkinLensR - Chat</title>
      </Head>
      <main className={styles.mainPageContainer}>
        {isLoggedIn
          ? <ChatInterface language={language} />
          : <WelcomeInterface language={language} />}
      </main>
    </>
  );
}